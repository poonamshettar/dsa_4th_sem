#include <stdio.h>
struct Node
{
    int data;
    struct Node *rl;
    struct Node *ll;
};
typedef struct Node *node;
node create_node()
{
    node newnode;
    newnode = (node)malloc(sizeof(struct Node));
    if (newnode == NULL)
    {
        printf("Memory not allocated");
    }
    printf("Enter data");
    scanf("%d", &newnode->data);
    newnode->rl = NULL;
    newnode->ll = NULL;
    return newnode;
}

node insert_end(node head)
{
    node cur;
    node newnode = create_node();
    if (head == NULL)
    {
        head = newnode;
    }
    else
    {
        cur = head;
        while (cur->rl != NULL)
        {
            cur = cur->rl;
        }
        cur->rl = newnode;
    }
    return head;
}

node insert_front(node head)
{
    node newnode = create_node();
    newnode->rl = head;
    head->ll = newnode;
    head = newnode;
    return head;
}

node delete_end(node head)
{
    node cur, prev;
    if (head == NULL)
    {

        printf("Empty");
    }
    else if (head->rl == NULL)
    {
        free(head);
        head = NULL;
        printf("Deleted");
    }
    else
    {
        cur = head;
        while (cur->rl != NULL)
        {
            prev = cur;
            cur = cur->rl;
        }
        cur->ll = NULL;
        prev->rl = NULL;
    }
    return head;
}
node delete_front(node head)
{
    node cur = head;
    head = head->rl;
    cur->rl = NULL;
    free(cur);
    return head;
}
int count(node head)
{

    int c = 0;
    node cur = head;
    while (cur != NULL)
    {
        c++;
        cur = cur->rl;
    }
    return c;
}

node delete_pos(node head)
{
    int pos, c, i;
    node prev, cur;
    node temp;
    printf("Enter pos");
    scanf("%d", &pos);
    c = count(head);
    if (pos == 0 && head->rl == NULL)
    {
        free(head);
        head = NULL;
        printf("Deleted");
    }
    else if (pos == 0)
    {
        head = delete_front(head);
    }
    else if (pos == c - 1)
    {
        head = delete_end(head);
    }
    else
    {
        prev = NULL;
        cur = head;
        for (i = 0; i < pos; i++)
        {
            prev = cur;
            cur = cur->rl;
        }
        temp = cur->rl;
        prev->rl = cur->rl;
        temp->ll = cur->ll;

        cur->rl = cur->ll = NULL;
        free(cur);
    }
    return head;
}

node insert_pos(node head)
{
    node cur, prev;
    int pos, c, i;
    node newnode = create_node();
    c = count(head);
    printf("Enter pos");
    scanf("%d", &pos);
    if (pos == 0 && head == NULL)
    {
        head = newnode;
    }
    else if ((pos == 0 && head->rl == NULL) || pos == 0)
    {
        head = insert_front(head);
    }
    else if (pos == c - 1)
    {
        head = insert_end(head);
    }
    else
    {
        prev = NULL;
        cur = head;
        for (i = 0; i < pos; i++)
        {
            prev = cur;
            cur = cur->rl;
        }
        prev->rl = newnode;
        newnode->rl = cur;
        newnode->ll = prev;
    }
    return head;
}

node search_delete(node head)
{

    int search, s = 0;
    node temp, cur, prev;
    printf("Enter search");
    scanf("%d", &search);
    if (head->data == search && head->rl == NULL)
    {
        free(head);
        head = NULL;
        printf("Deleted");
    }
    else if (head->data == search)
    {
        head = delete_front(head);
    }

    else
    {
        prev = NULL;
        cur = head;
        while (cur->rl != NULL)
        {

            if (cur->data == search)
            {
                s = 1;
                break;
            }
            prev = cur;
            cur = cur->rl;
        }
        if (cur->data == search)
        {
            head = delete_end(head);
        }
    }
    if (s == 1)
    {
        temp = cur->rl;
        prev->rl = cur->rl;
        temp->ll = cur->ll;
        cur->rl = cur->ll = NULL;
    }
    return head;
}
void display(node head)
{
    node cur = head;
    while (cur != NULL)
    {
        printf("%d", cur->data);
        cur = cur->rl;
    }
}
node rev(node head)
{

    node cur = head;
    node prev = NULL;
    while (cur != NULL)
    {
        cur->ll = cur->rl; // line 1
        cur->rl = prev;    // line 2
        prev = cur;        // line 3
        cur = cur->ll;
    }
    head = prev;
    return head;
}

int main()
{
    int ch, c;
    node head = NULL;
    while (1)
    {
        printf("Enter choice");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            head = insert_end(head);
            break;
        case 2:
            display(head);
            break;
        case 3:
            head = insert_front(head);
            break;
        case 4:
            head = delete_end(head);
            break;
        case 5:
            head = delete_front(head);
            break;
        case 6:
            c = count(head);
            break;
        case 7:
            head = delete_pos(head);
            break;
        case 8:
            head = insert_pos(head);
            break;
        case 9:
            head = search_delete(head);
            break;
        case 10:
            head = rev(head);
            break;
        default:
            printf("Invalid");
            break;
        }
    }

    return 0;
}
